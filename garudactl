#!/usr/bin/env python

import logging

# Logger
logger = logging.getLogger('garuda')
handler = logging.StreamHandler()
formatter = logging.Formatter('[%(levelname)s] %(name)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)

from time import sleep

from bambou import BambouConfig
BambouConfig.set_should_raise_bambou_http_error(False)

from garuda.core.controllers import GACoreController, GALogicPluginsController


def set_log_level(level):
    """
    """
    logger.setLevel(level)

def start():

    """
    """
    from garuda.channels.rest import RESTCommunicationChannel
    rest_comm_channel = RESTCommunicationChannel(host="0.0.0.0", port=2000, threaded=True, debug=True, use_reloader=False)

    from garuda.plugins.tdl_storage_plugin import TDLStoragePlugin
    tdl_storage_plugin = TDLStoragePlugin(db_path='/tmp/garuda.sqlite')

    from garuda.plugins.tdl_authentication_plugin import TDLAuthenticationPlugin
    tdl_authentication_plugin = TDLAuthenticationPlugin()


    # Instanciate plugins
    # from garuda.plugins import DefaultAuthenticationPlugin, DefaultGAModelControllerPlugin, DefaultPermissionsControllerPlugin
    # default_model_controller = DefaultGAModelControllerPlugin()
    # default_authentication_plugin = DefaultAuthenticationPlugin()
    # default_permission_controller_plugin = DefaultPermissionsControllerPlugin()

    core = GACoreController(    sdks_info=[{'identifier': 'tdldk', 'module': 'tdldk.v1_0'}],
                                communication_channel_plugins=[rest_comm_channel],
                                authentication_plugins=[tdl_authentication_plugin],
                                model_controller_plugins=[tdl_storage_plugin],
                                permission_controller_plugins=[])
    core.start()

    logger.info('Garuda is initialized and ready to rock! (Press CTRL+C to quit)')
    while True:
        try:
            sleep(3000)
        except KeyboardInterrupt:
            break

    core.stop()
    logger.info('Garuda has stopped.')


if __name__ == '__main__':
    print """

                           +7
           NI??????D        I+=          Garuda 1.0.0
        IIII????????ID ?      ++         ============
      IIIIII             +    D++
    ?IIII$Z                    ===       Single node mode
   IIII I                      N===      Port: 2000
  IIIDI?                        ===:     https://garuda.org
  IIIIID                       D====
  IIIII                       7===7=
  IIIIIZ                     O=== ==
   INIII?                   =+== ==
   O?III??I               ?+===~===
     DI?????+          I++++O~===+
      N????$??????7DZ$$8N?+++===
        ?????8????++++++++++==
          ?????+++NZ=+++=+N7
             +?+_++++++=O
"""
    start()

